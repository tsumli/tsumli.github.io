<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tsumli pages</title><link>https://tsumli.github.io/</link><description>Recent content on tsumli pages</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 02 Aug 2024 00:55:54 +0000</lastBuildDate><atom:link href="https://tsumli.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>CUDA: Cooperative Groupsについて</title><link>https://tsumli.github.io/posts/cuda/cooperative-groups/</link><pubDate>Fri, 02 Aug 2024 00:55:54 +0000</pubDate><guid>https://tsumli.github.io/posts/cuda/cooperative-groups/</guid><description>&lt;p>&lt;a href="https://developer.nvidia.com/blog/cooperative-groups/" class="external-link" target="_blank" rel="noopener">NVIDIAのblog&lt;/a> を読んでいたのですが良く分からなかったのでコードを動かしながら見ていきます。&lt;/p>
&lt;h2 id="cooperative-groups-とは">
 Cooperative Groups とは?
 &lt;a class="heading-link" href="#cooperative-groups-%e3%81%a8%e3%81%af">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;figure>&lt;img src="images/overview.png"
 alt="Concepts of Cooperative Groups.">&lt;figcaption>
 &lt;p>Concepts of Cooperative Groups.&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>今までは&lt;code>__syncthreads()&lt;/code>を使わないと同期できませんでした。しかし、これよりも小さなグループで同期を取りたいことがあります。Cooperative GroupsはCUDA 9から導入された機能で、これを使うことによって柔軟な同期が可能になります。&lt;/p>
&lt;p>&lt;code>cooperative_groups.h&lt;/code>をincludeするだけで使うことができます。そして、一般的に&lt;code>cg&lt;/code>とaliasされることが多いようです。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-weight:bold;font-style:italic">#include&lt;/span> &lt;span style="color:#8b949e;font-weight:bold;font-style:italic">&amp;lt;cooperative_groups.h&amp;gt;&lt;/span>&lt;span style="color:#8b949e;font-weight:bold;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-weight:bold;font-style:italic">&lt;/span>&lt;span style="color:#ff7b72">namespace&lt;/span> cg &lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span> cooperative_groups;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>これより先のコードではこの定義を使うため注意してください。&lt;/p>
&lt;h2 id="thread-group">
 Thread Group
 &lt;a class="heading-link" href="#thread-group">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Cooperative Groupsの中でも最も基本の型は&lt;code>thread_group&lt;/code>です。threadの数やthreadのindex ([0, size - 1]) は次のように取得できます。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#ff7b72">void&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">my_kernel&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cg&lt;span style="color:#ff7b72;font-weight:bold">::&lt;/span>thread_block block &lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span> cg&lt;span style="color:#ff7b72;font-weight:bold">::&lt;/span>this_thread_block();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#a5d6ff">&amp;#34;size: %d, thread_rank: %d&lt;/span>&lt;span style="color:#79c0ff">\n&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;&lt;/span>, block.size(), block.thread_rank());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">int&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_kernel&lt;span style="color:#ff7b72;font-weight:bold">&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#a5d6ff">2&lt;/span>, &lt;span style="color:#a5d6ff">4&lt;/span>&lt;span style="color:#ff7b72;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> THROW_IF_FAILED(cudaDeviceSynchronize());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff7b72">return&lt;/span> &lt;span style="color:#a5d6ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>出力は以下になります&lt;/p></description></item><item><title>新しいPCを組んだので構成など</title><link>https://tsumli.github.io/posts/personal/desktop-20231201/</link><pubDate>Fri, 01 Dec 2023 00:55:54 +0000</pubDate><guid>https://tsumli.github.io/posts/personal/desktop-20231201/</guid><description>&lt;p>新しいPCを組んだので構成などのメモです (自分用) 。
セールなど使ってちょこちょこ買ったのですが計50万円は超えました&amp;hellip;&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>CPU&lt;/td>
 &lt;td>intel Core i9-13900KF&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CPUクーラー&lt;/td>
 &lt;td>MSI MEG CORELIQUID S360&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>GPU&lt;/td>
 &lt;td>MSI GeForce RTX 4090 GAMING X TRIO 24G&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SSD&lt;/td>
 &lt;td>SAMSUNG 980 PRO 2TB&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>電源&lt;/td>
 &lt;td>Thermaltake TOUGHPOWER GF3 1200W&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>メモリ&lt;/td>
 &lt;td>Crucial CT2K32G4DFD832A x 2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>マザーボード&lt;/td>
 &lt;td>MSI MAG Z790 TOMAHAWK WIFI&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ケース&lt;/td>
 &lt;td>Fractal Design Define 7&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>OS&lt;/td>
 &lt;td>Ubuntu 22.04&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>グリス&lt;/td>
 &lt;td>ARCTIC MX-4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ケース&lt;/td>
 &lt;td>Fractal Design Define 7 Black Solid&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ファン&lt;/td>
 &lt;td>Scythe KAZE FLEX 140 SQUARE PWM 1200rpm KF1425FD12S-P&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ファン2&lt;/td>
 &lt;td>Noctua NF-A12X25 PWM&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>この構成で良かった所とダメだった所を考えてみます。&lt;/p></description></item><item><title>DockerでSingularityのImageをbuildする</title><link>https://tsumli.github.io/posts/abci/docker-build-singularity/</link><pubDate>Fri, 16 Apr 2021 18:01:52 +0000</pubDate><guid>https://tsumli.github.io/posts/abci/docker-build-singularity/</guid><description>&lt;p>dockerでsingularityのimage file (.sif) を作成したときのメモ書きです．&lt;/p>
&lt;h2 id="motivation">
 Motivation
 &lt;a class="heading-link" href="#motivation">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ローカルPCでsingularity buildしたい (docker image to singularity image) けど，ローカルPCの環境を汚したくない，という状況です．&lt;/p>
&lt;h2 id="method">
 Method
 &lt;a class="heading-link" href="#method">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>まず，もととなるdocker imageを用意します．例えばこれをfoo:latestとします．
一般的な方法 (コンテナ内でsingularityをインストールし，そこからfoo:latestを変換する) でbuildしようとしても，
コンテナ内からdocker imageを見ることができないため不可能です．&lt;/p>
&lt;p>そこで，Docker out of Docker (DooD) という方法でbuildしていきます
(実際にはコンテナからコンテナを操作しているわけではないので，この用語は適切でないかもしれません)．
やり方としては簡単で，ホストのdocker.sockをマウントして実行することで，ホストのdocker imageをコンテナに共有することができます．
以下のようなshellscriptを作成し，保存します．
今回はquay.ioからimageを持ってきました．&lt;a href="https://quay.io/repository/singularity/singularity?tab=tags" class="external-link" target="_blank" rel="noopener">Tags&lt;/a>を見ることで，
他のsingularityのバージョンなどに適宜変更できます．&lt;/p>
&lt;div class="highlight">&lt;div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># build_singularity.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --rm -v &lt;span style="color:#a5d6ff">&amp;#34;&lt;/span>&lt;span style="color:#79c0ff">$PWD&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;&lt;/span>:/src/ -w&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;/src/&amp;#34;&lt;/span> -v /var/run/docker.sock:/var/run/docker.sock quay.io/singularity/singularity:v3.7.2 build /src/&lt;span style="color:#a5d6ff">${&lt;/span>&lt;span style="color:#79c0ff">NAME&lt;/span>&lt;span style="color:#a5d6ff">}&lt;/span>.sif docker-daemon://&lt;span style="color:#a5d6ff">${&lt;/span>&lt;span style="color:#79c0ff">IMAGE&lt;/span>&lt;span style="color:#a5d6ff">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>このshellscriptを次のように実行します．&lt;/p></description></item><item><title>自分的Singularityの使い方</title><link>https://tsumli.github.io/posts/abci/singularity/</link><pubDate>Mon, 01 Feb 2021 15:55:54 +0000</pubDate><guid>https://tsumli.github.io/posts/abci/singularity/</guid><description>&lt;h2 id="why-singularity">
 Why Singularity?
 &lt;a class="heading-link" href="#why-singularity">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>abciを使うときにdockerではなくsingularityを使う必要があったのですが、戸惑う部分が多かったので記録しておきます。
dockerはroot権限が奪取される可能性があるため、共用サーバなどではセキュリティの問題から使用できない場面が多いです。&lt;/p>
&lt;h2 id="how-to-use">
 How to use
 &lt;a class="heading-link" href="#how-to-use">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>今回扱うバージョンはsingularitypro/3.5です。&lt;/p>
&lt;h3 id="1-def-to-sif">
 1. .def to .sif
 &lt;a class="heading-link" href="#1-def-to-sif">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>imageを作成するためのDefinition fileを作成します (詳細は&lt;a href="https://repo.sylabs.io/c/0f6898986ad0b646b5ce6deba21781ac62cb7e0a86a5153bbb31732ee6593f43/guides/singularitypro35-user-guide/" class="external-link" target="_blank" rel="noopener">公式ドキュメント&lt;/a>) 。&lt;br>
ubuntuのimageをもとにdefinition fileを作成しました (docker-compose.ymlを書くときのイメージですね) 。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml:foo.def" data-lang="yaml:foo.def">&lt;span style="display:flex;">&lt;span>Bootstrap: docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>From: ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f85149">%&lt;/span>files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f85149">%&lt;/span>post
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	apt upgrade &lt;span style="color:#ff7b72;font-weight:bold">-&lt;/span>y 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	apt install &lt;span style="color:#ff7b72;font-weight:bold">-&lt;/span>y python3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	apt install &lt;span style="color:#ff7b72;font-weight:bold">-&lt;/span>y python3&lt;span style="color:#ff7b72;font-weight:bold">-&lt;/span>pip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	pip3 install &lt;span style="color:#ff7b72;font-weight:bold">-&lt;/span>r requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f85149">%&lt;/span>environment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	export LC_ALL&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>ja_JP.utf&lt;span style="color:#ff7b72;font-weight:bold">-&lt;/span>&lt;span style="color:#a5d6ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export LANG&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>ja_JP.utf&lt;span style="color:#ff7b72;font-weight:bold">-&lt;/span>&lt;span style="color:#a5d6ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-build">
 2. build
 &lt;a class="heading-link" href="#2-build">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>このファイルをfoo.defとして保存し、buildします。&lt;/p></description></item></channel></rss>