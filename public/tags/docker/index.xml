<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on tsumli pages</title><link>https://tsumli.github.io/tags/docker/</link><description>Recent content in Docker on tsumli pages</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 16 Apr 2021 18:01:52 +0000</lastBuildDate><atom:link href="https://tsumli.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>DockerでSingularityのImageをbuildする</title><link>https://tsumli.github.io/posts/abci/docker-build-singularity/</link><pubDate>Fri, 16 Apr 2021 18:01:52 +0000</pubDate><guid>https://tsumli.github.io/posts/abci/docker-build-singularity/</guid><description>&lt;p>dockerでsingularityのimage file (.sif) を作成したときのメモ書きです．&lt;/p>
&lt;h2 id="motivation">
 Motivation
 &lt;a class="heading-link" href="#motivation">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ローカルPCでsingularity buildしたい (docker image to singularity image) けど，ローカルPCの環境を汚したくない，という状況です．&lt;/p>
&lt;h2 id="method">
 Method
 &lt;a class="heading-link" href="#method">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>まず，もととなるdocker imageを用意します．例えばこれをfoo:latestとします．
一般的な方法 (コンテナ内でsingularityをインストールし，そこからfoo:latestを変換する) でbuildしようとしても，
コンテナ内からdocker imageを見ることができないため不可能です．&lt;/p>
&lt;p>そこで，Docker out of Docker (DooD) という方法でbuildしていきます
(実際にはコンテナからコンテナを操作しているわけではないので，この用語は適切でないかもしれません)．
やり方としては簡単で，ホストのdocker.sockをマウントして実行することで，ホストのdocker imageをコンテナに共有することができます．
以下のようなshellscriptを作成し，保存します．
今回はquay.ioからimageを持ってきました．&lt;a href="https://quay.io/repository/singularity/singularity?tab=tags" class="external-link" target="_blank" rel="noopener">Tags&lt;/a>を見ることで，
他のsingularityのバージョンなどに適宜変更できます．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># build_singularity.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --rm -v &lt;span style="color:#a5d6ff">&amp;#34;&lt;/span>&lt;span style="color:#79c0ff">$PWD&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;&lt;/span>:/src/ -w&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;/src/&amp;#34;&lt;/span> -v /var/run/docker.sock:/var/run/docker.sock quay.io/singularity/singularity:v3.7.2 build /src/&lt;span style="color:#a5d6ff">${&lt;/span>&lt;span style="color:#79c0ff">NAME&lt;/span>&lt;span style="color:#a5d6ff">}&lt;/span>.sif docker-daemon://&lt;span style="color:#a5d6ff">${&lt;/span>&lt;span style="color:#79c0ff">IMAGE&lt;/span>&lt;span style="color:#a5d6ff">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このshellscriptを次のように実行します．&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#79c0ff">IMAGE&lt;/span>&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>foo:latest &lt;span style="color:#79c0ff">NAME&lt;/span>&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>foo sh build_singularity.sh 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果として，カレントディレクトリに${NAME}.sifが生成されます．
あとはGPUサーバに上げるなりして使うことができます．&lt;/p>
&lt;hr>
&lt;p>感想として，.sifファイルは.defファイルから作成するよりもdocker imageから作成する方が簡単でした (単に慣れの問題かもしれません).
セキュリティの問題でremoteサーバでdockerが使えず，singularityが推奨されることが多いので，
このように簡単にimageファイルが作成できるのはうれしいです．&lt;/p></description></item></channel></rss>