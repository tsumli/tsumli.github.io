<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on tsumli pages</title>
    <link>http://localhost:1313/tags/docker/</link>
    <description>Recent content in Docker on tsumli pages</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Apr 2021 18:01:52 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DockerでSingularityのImageをbuildする</title>
      <link>http://localhost:1313/posts/abci/docker-build-singularity/</link>
      <pubDate>Fri, 16 Apr 2021 18:01:52 +0000</pubDate>
      <guid>http://localhost:1313/posts/abci/docker-build-singularity/</guid>
      <description>&lt;p&gt;dockerでsingularityのimage file (.sif) を作成したときのメモ書きです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;&#xA;&lt;p&gt;ローカルPCでsingularity buildしたい (docker image to singularity image) けど，ローカルPCの環境を汚したくない，という状況です．&lt;/p&gt;&#xA;&lt;h2 id=&#34;method&#34;&gt;Method&lt;/h2&gt;&#xA;&lt;p&gt;まず，もととなるdocker imageを用意します．例えばこれをfoo:latestとします．&#xA;一般的な方法 (コンテナ内でsingularityをインストールし，そこからfoo:latestを変換する) でbuildしようとしても，&#xA;コンテナ内からdocker imageを見ることができないため不可能です．&lt;/p&gt;&#xA;&lt;p&gt;そこで，Docker out of Docker (DooD) という方法でbuildしていきます&#xA;(実際にはコンテナからコンテナを操作しているわけではないので，この用語は適切でないかもしれません)．&#xA;やり方としては簡単で，ホストのdocker.sockをマウントして実行することで，ホストのdocker imageをコンテナに共有することができます．&#xA;以下のようなshellscriptを作成し，保存します．&#xA;今回はquay.ioからimageを持ってきました．&lt;a href=&#34;https://quay.io/repository/singularity/singularity?tab=tags&#34;&gt;Tags&lt;/a&gt;を見ることで，&#xA;他のsingularityのバージョンなどに適宜変更できます．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;1&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;2&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# build_singularity.sh&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --rm -v &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PWD&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;:/src/ -w&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;/src/&amp;#34;&lt;/span&gt; -v /var/run/docker.sock:/var/run/docker.sock quay.io/singularity/singularity:v3.7.2 build /src/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;.sif docker-daemon://&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;IMAGE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;このshellscriptを次のように実行します．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;IMAGE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;foo:latest &lt;span style=&#34;color:#79c0ff&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;foo sh build_singularity.sh &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;結果として，カレントディレクトリに${NAME}.sifが生成されます．&#xA;あとはGPUサーバに上げるなりして使うことができます．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;感想として，.sifファイルは.defファイルから作成するよりもdocker imageから作成する方が簡単でした (単に慣れの問題かもしれません).&#xA;セキュリティの問題でremoteサーバでdockerが使えず，singularityが推奨されることが多いので，&#xA;このように簡単にimageファイルが作成できるのはうれしいです．&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
