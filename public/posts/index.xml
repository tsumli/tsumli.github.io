<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tsumli pages</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on tsumli pages</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Jun 2025 00:01:52 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SlangとVulkanでのRaytracing</title>
      <link>http://localhost:1313/posts/graphics/raytracing/vulkan_slang/</link>
      <pubDate>Mon, 16 Jun 2025 00:01:52 +0000</pubDate>
      <guid>http://localhost:1313/posts/graphics/raytracing/vulkan_slang/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;&#xA;  はじめに&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;SlangとVulkanを用いてRaytracingを行う記事があまりなかったので書きます&lt;/p&gt;&#xA;&lt;h3 id=&#34;slangとは&#34;&gt;&#xA;  Slangとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#slang%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Sascha Willemsの&lt;a href=&#34;https://github.com/SaschaWillems/Vulkan&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vulkan&lt;/a&gt;レポジトリで、GLSL/HLSLに加えて&lt;a href=&#34;https://www.saschawillems.de/blog/2025/06/03/shaders-for-vulkan-samples-now-also-available-in-slang/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;採用&lt;/a&gt;されたりと、個人的に気になっているシェーディング言語です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;references&#34;&gt;&#xA;  References&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#references&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.shader-slang.org/en/latest/external/slang/docs/user-guide/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slang User’s Guide&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HLSL, GLSLからの移行ガイドなど&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>CUDA: Cooperative Groupsについて</title>
      <link>http://localhost:1313/posts/cuda/cooperative-groups/</link>
      <pubDate>Fri, 02 Aug 2024 00:55:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/cuda/cooperative-groups/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/blog/cooperative-groups/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NVIDIAのblog&lt;/a&gt; を読んでいたのですが良く分からなかったのでコードを動かしながら見ていきます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cooperative-groups-とは&#34;&gt;&#xA;  Cooperative Groups とは?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cooperative-groups-%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;images/overview.png&#34;&#xA;    alt=&#34;Concepts of Cooperative Groups.&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Concepts of Cooperative Groups.&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;今までは&lt;code&gt;__syncthreads()&lt;/code&gt;を使わないと同期できませんでした。しかし、これよりも小さなグループで同期を取りたいことがあります。Cooperative GroupsはCUDA 9から導入された機能で、これを使うことによって柔軟な同期が可能になります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;cooperative_groups.h&lt;/code&gt;をincludeするだけで使うことができます。そして、一般的に&lt;code&gt;cg&lt;/code&gt;とaliasされることが多いようです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;cooperative_groups.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; cg &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; cooperative_groups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これより先のコードではこの定義を使うため注意してください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;thread-group&#34;&gt;&#xA;  Thread Group&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#thread-group&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Cooperative Groupsの中でも最も基本の型は&lt;code&gt;thread_group&lt;/code&gt;です。threadの数やthreadのindex ([0, size - 1]) は次のように取得できます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__global__ &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;my_kernel&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cg&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;thread_block block &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; cg&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;this_thread_block();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;size: %d, thread_rank: %d&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;, block.size(), block.thread_rank());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    my_kernel&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    THROW_IF_FAILED(cudaDeviceSynchronize());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出力は以下になります&lt;/p&gt;</description>
    </item>
    <item>
      <title>新しいPCを組んだので構成など</title>
      <link>http://localhost:1313/posts/personal/desktop-20231201/</link>
      <pubDate>Fri, 01 Dec 2023 00:55:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/personal/desktop-20231201/</guid>
      <description>&lt;p&gt;新しいPCを組んだので構成などのメモです (自分用) 。&#xA;セールなど使ってちょこちょこ買ったのですが計50万円は超えました&amp;hellip;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CPU&lt;/td&gt;&#xA;          &lt;td&gt;intel Core i9-13900KF&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CPUクーラー&lt;/td&gt;&#xA;          &lt;td&gt;MSI MEG CORELIQUID S360&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;GPU&lt;/td&gt;&#xA;          &lt;td&gt;MSI GeForce RTX 4090 GAMING X TRIO 24G&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SSD&lt;/td&gt;&#xA;          &lt;td&gt;SAMSUNG 980 PRO 2TB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;電源&lt;/td&gt;&#xA;          &lt;td&gt;Thermaltake TOUGHPOWER GF3 1200W&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;メモリ&lt;/td&gt;&#xA;          &lt;td&gt;Crucial CT2K32G4DFD832A x 2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;マザーボード&lt;/td&gt;&#xA;          &lt;td&gt;MSI MAG Z790 TOMAHAWK WIFI&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ケース&lt;/td&gt;&#xA;          &lt;td&gt;Fractal Design Define 7&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;OS&lt;/td&gt;&#xA;          &lt;td&gt;Ubuntu 22.04&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;グリス&lt;/td&gt;&#xA;          &lt;td&gt;ARCTIC MX-4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ケース&lt;/td&gt;&#xA;          &lt;td&gt;Fractal Design Define 7 Black Solid&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ファン&lt;/td&gt;&#xA;          &lt;td&gt;Scythe KAZE FLEX 140 SQUARE PWM 1200rpm KF1425FD12S-P&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ファン2&lt;/td&gt;&#xA;          &lt;td&gt;Noctua NF-A12X25 PWM&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;この構成で良かった所とダメだった所を考えてみます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DockerでSingularityのImageをbuildする</title>
      <link>http://localhost:1313/posts/abci/docker-build-singularity/</link>
      <pubDate>Fri, 16 Apr 2021 18:01:52 +0000</pubDate>
      <guid>http://localhost:1313/posts/abci/docker-build-singularity/</guid>
      <description>&lt;p&gt;dockerでsingularityのimage file (.sif) を作成したときのメモ書きです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;motivation&#34;&gt;&#xA;  Motivation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#motivation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ローカルPCでsingularity buildしたい (docker image to singularity image) けど，ローカルPCの環境を汚したくない，という状況です．&lt;/p&gt;&#xA;&lt;h2 id=&#34;method&#34;&gt;&#xA;  Method&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#method&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;まず，もととなるdocker imageを用意します．例えばこれをfoo:latestとします．&#xA;一般的な方法 (コンテナ内でsingularityをインストールし，そこからfoo:latestを変換する) でbuildしようとしても，&#xA;コンテナ内からdocker imageを見ることができないため不可能です．&lt;/p&gt;&#xA;&lt;p&gt;そこで，Docker out of Docker (DooD) という方法でbuildしていきます&#xA;(実際にはコンテナからコンテナを操作しているわけではないので，この用語は適切でないかもしれません)．&#xA;やり方としては簡単で，ホストのdocker.sockをマウントして実行することで，ホストのdocker imageをコンテナに共有することができます．&#xA;以下のようなshellscriptを作成し，保存します．&#xA;今回はquay.ioからimageを持ってきました．&lt;a href=&#34;https://quay.io/repository/singularity/singularity?tab=tags&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tags&lt;/a&gt;を見ることで，&#xA;他のsingularityのバージョンなどに適宜変更できます．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# build_singularity.sh&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --rm -v &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PWD&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;:/src/ -w&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;/src/&amp;#34;&lt;/span&gt; -v /var/run/docker.sock:/var/run/docker.sock quay.io/singularity/singularity:v3.7.2 build /src/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;.sif docker-daemon://&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;IMAGE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このshellscriptを次のように実行します．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;IMAGE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;foo:latest &lt;span style=&#34;color:#79c0ff&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;foo sh build_singularity.sh &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結果として，カレントディレクトリに${NAME}.sifが生成されます．&#xA;あとはGPUサーバに上げるなりして使うことができます．&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;感想として，.sifファイルは.defファイルから作成するよりもdocker imageから作成する方が簡単でした (単に慣れの問題かもしれません).&#xA;セキュリティの問題でremoteサーバでdockerが使えず，singularityが推奨されることが多いので，&#xA;このように簡単にimageファイルが作成できるのはうれしいです．&lt;/p&gt;</description>
    </item>
    <item>
      <title>自分的Singularityの使い方</title>
      <link>http://localhost:1313/posts/abci/singularity/</link>
      <pubDate>Mon, 01 Feb 2021 15:55:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/abci/singularity/</guid>
      <description>&lt;h2 id=&#34;why-singularity&#34;&gt;&#xA;  Why Singularity?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#why-singularity&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;abciを使うときにdockerではなくsingularityを使う必要があったのですが、戸惑う部分が多かったので記録しておきます。&#xA;dockerはroot権限が奪取される可能性があるため、共用サーバなどではセキュリティの問題から使用できない場面が多いです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-use&#34;&gt;&#xA;  How to use&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#how-to-use&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;今回扱うバージョンはsingularitypro/3.5です。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-def-to-sif&#34;&gt;&#xA;  1. .def to .sif&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1-def-to-sif&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;imageを作成するためのDefinition fileを作成します (詳細は&lt;a href=&#34;https://repo.sylabs.io/c/0f6898986ad0b646b5ce6deba21781ac62cb7e0a86a5153bbb31732ee6593f43/guides/singularitypro35-user-guide/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;公式ドキュメント&lt;/a&gt;) 。&lt;br&gt;&#xA;ubuntuのimageをもとにdefinition fileを作成しました (docker-compose.ymlを書くときのイメージですね) 。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml:foo.def&#34; data-lang=&#34;yaml:foo.def&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bootstrap: docker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From: ubuntu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f85149&#34;&gt;%&lt;/span&gt;files&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;requirements.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f85149&#34;&gt;%&lt;/span&gt;post&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;apt update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;apt upgrade &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;y &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;apt install &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;y python3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;apt install &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;y python3&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;pip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pip3 install &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;r requirements.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f85149&#34;&gt;%&lt;/span&gt;environment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;export LC_ALL&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ja_JP.utf&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export LANG&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ja_JP.utf&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-build&#34;&gt;&#xA;  2. build&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2-build&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;このファイルをfoo.defとして保存し、buildします。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
